wrong = wrong + 1
}
}
accuracy = correct / (correct + wrong)
end_time = Sys.time()
return(list(time = end_time - start_time, accuray = accuracy))
}
Timing_SVD(U_100)
# #Uncommment code below
Timing_SVD = function(U,datapoints = ncol(test_data)){ #Remove indexing
start_time = Sys.time()
correct = 0
wrong = 0
for(i in 1:datapoints){
RecognizedDigit = digit_SVD(as.matrix(test_data[,i]),U)
if (test_label[i]==RecognizedDigit){
correct = correct + 1
}else{
wrong = wrong + 1
}
}
accuracy = correct / (correct + wrong)
end_time = Sys.time()
return(list(time = end_time - start_time, accuray = accuracy))
}
Timing_SVD(U_100)
digit_SVD(test_data[,1],U_100)
digit_SVD = function(b, Uj){
bestError = 1000000
digitrec = 100
# Put your code here
J = ncol(Uj)/10
#print(J)
n = nrow(Uj)
for(j in 1:10) {
if(j == 1) {
PJ = matrix(0, nrow = n, ncol = n)
for(i in 1:J) {
PJ = PJ + Uj[,i]%*%t(Uj[,i])
}
bHat = PJ%*%b #This is not going to work, rows in PJ dont match b
r = vnorm(bHat - b)
if(r < bestError) {
bestError = r
digitrec = i-1
}
} else {
PJ = matrix(0, nrow = n, ncol = n)
for(i in ((j-1)*J):(j*J)) {
PJ = PJ + Uj[,i]%*%t(Uj[,i])
}
bHat = PJ%*%b
r = vnorm(bHat - b) #might need norm function here
if(r < bestError) {
bestError = r
digitrec = i-1
}
}
}
return(digitrec)
}
digit_SVD(test_data[,1],U_100)
digit_SVD = function(b, Uj){
bestError = 1000000
digitrec = 100
# Put your code here
J = ncol(Uj)/10
#print(J)
n = nrow(Uj)
for(j in 1:10) {
if(j == 1) {
PJ = matrix(0, nrow = n, ncol = n)
for(i in 1:J) {
PJ = PJ + Uj[,i]%*%t(Uj[,i])
}
bHat = PJ%*%b #This is not going to work, rows in PJ dont match b
r = vnorm(bHat - b)
if(r < bestError) {
bestError = r
digitrec = i-1
}
} else {
PJ = matrix(0, nrow = n, ncol = n)
for(i in ((j-1)*J):(j*J)) {
PJ = PJ + Uj[,i]%*%t(Uj[,i])
}
bHat = PJ%*%b
r = vnorm(bHat - b) #might need norm function here
if(r < bestError) {
bestError = r
digitrec = i-1
}
}
}
return(digitrec)
}
digit_SVD = function(b, Uj){
bestError = 1000000
digitrec = 100
# Put your code here
J = ncol(Uj)/10
#print(J)
n = nrow(Uj)
for(j in 1:10) {
if(j == 1) {
PJ = matrix(0, nrow = n, ncol = n)
for(i in 1:J) {
PJ = PJ + Uj[,i]%*%t(Uj[,i])
}
bHat = PJ%*%b #This is not going to work, rows in PJ dont match b
r = vnorm(bHat - b)
if(r < bestError) {
bestError = r
digitrec = i-1
}
} else {
PJ = matrix(0, nrow = n, ncol = n)
for(i in ((j-1)*J):(j*J)) {
PJ = PJ + Uj[,i]%*%t(Uj[,i])
}
bHat = PJ%*%b
r = vnorm(bHat - b) #might need norm function here
if(r < bestError) {
bestError = r
digitrec = i-1
}
}
}
return(digitrec)
}
#J = 17
U_100=c() #Find this matrix
for(i in 1:10) {
if(i == 1) {
A = train_data_1000[,1:100]
} else {
A = train_data_1000[,((i-1)*100):(i*100)] #Will need to change thes indices
}
outS = svd(A)
u = outS$u
U_100 = cbind(U_100, u[,1:17])
}
U_J=c()#Find this matrix
num = ncol(train_data)/10
for(i in 1:10) {
if(i == 1) {
A = train_data[,1:num]
} else {
A = train_data[,((i-1)*num):(i*num)] #Will need to change thes indices
}
outS = svd(A)
u = outS$u
U_J = cbind(U_J, u[,1:17])
}
digit_SVD = function(b, Uj){
bestError = 1000000
digitrec = 100
# Put your code here
J = ncol(Uj)/10
#print(J)
n = nrow(Uj)
for(j in 1:10) {
if(j == 1) {
PJ = matrix(0, nrow = n, ncol = n)
for(i in 1:J) {
PJ = PJ + Uj[,i]%*%t(Uj[,i])
}
bHat = PJ%*%b #This is not going to work, rows in PJ dont match b
r = vnorm(bHat - b)
if(r < bestError) {
bestError = r
digitrec = i-1
}
} else {
PJ = matrix(0, nrow = n, ncol = n)
for(i in ((j-1)*J):(j*J)) {
PJ = PJ + Uj[,i]%*%t(Uj[,i])
}
bHat = PJ%*%b
r = vnorm(bHat - b) #might need norm function here
if(r < bestError) {
bestError = r
digitrec = i-1
}
}
}
return(digitrec)
}
digit_SVD(test_data[,1],U_100)
digit_SVD = function(b, Uj){
bestError = 1000000
digitrec = 100
# Put your code here
J = ncol(Uj)/10
#print(J)
n = nrow(Uj)
for(j in 1:10) {
if(j == 1) {
PJ = matrix(0, nrow = n, ncol = n)
for(i in 1:J) {
PJ = PJ + Uj[,i]%*%t(Uj[,i])
}
bHat = PJ%*%b #This is not going to work, rows in PJ dont match b
r = vnorm(bHat - b)
if(r < bestError) {
bestError = r
digitrec = i-1
}
} else {
PJ = matrix(0, nrow = n, ncol = n)
for(i in ((j-1)*J):(j*J)) {
PJ = PJ + Uj[,i]%*%t(Uj[,i])
}
bHat = PJ%*%b
r = vnorm(bHat - b) #might need norm function here
if(r < bestError) {
bestError = r
digitrec = i-1
}
}
}
return(digitrec)
}
# #Uncommment code below
Timing_SVD = function(U,datapoints = ncol(test_data)){ #Remove indexing
start_time = Sys.time()
correct = 0
wrong = 0
for(i in 1:datapoints){
RecognizedDigit = digit_SVD(as.matrix(test_data[,i]),U)
if (test_label[i]==RecognizedDigit){
correct = correct + 1
}else{
wrong = wrong + 1
}
}
accuracy = correct / (correct + wrong)
end_time = Sys.time()
return(list(time = end_time - start_time, accuray = accuracy))
}
Timing_SVD(U_100)
digit_SVD(test_data[,1],U_100)
digit_SVD = function(b, Uj){
bestError = 1000000
digitrec = 100
# Put your code here
J = ncol(Uj)/10
#print(J)
n = nrow(Uj)
for(j in 1:10) {
if(j == 1) {
PJ = matrix(0, nrow = n, ncol = n)
for(i in 1:J) {
PJ = PJ + Uj[,i]%*%t(Uj[,i])
}
bHat = PJ%*%b #This is not going to work, rows in PJ dont match b
r = vnorm(bHat - b)
if(r < bestError) {
bestError = r
digitrec = j-1
}
} else {
PJ = matrix(0, nrow = n, ncol = n)
for(i in ((j-1)*J):(j*J)) {
PJ = PJ + Uj[,i]%*%t(Uj[,i])
}
bHat = PJ%*%b
r = vnorm(bHat - b) #might need norm function here
if(r < bestError) {
bestError = r
digitrec = j-1
}
}
}
return(digitrec)
}
digit_SVD(test_data[,1],U_100)
#J = 17
U_100=c() #Find this matrix
for(i in 1:10) {
if(i == 1) {
A = train_data_1000[,1:100]
} else {
A = train_data_1000[,((i-1)*100):(i*100)] #Will need to change thes indices
}
outS = svd(A)
u = outS$u
U_100 = cbind(U_100, u[,1:17])
}
U_J=c()#Find this matrix
num = ncol(train_data)/10
for(i in 1:10) {
if(i == 1) {
A = train_data[,1:num]
} else {
A = train_data[,((i-1)*num):(i*num)] #Will need to change thes indices
}
outS = svd(A)
u = outS$u
U_J = cbind(U_J, u[,1:17])
}
# #Uncommment code below
Timing_SVD = function(U,datapoints = ncol(test_data)){ #Remove indexing
start_time = Sys.time()
correct = 0
wrong = 0
for(i in 1:datapoints){
RecognizedDigit = digit_SVD(as.matrix(test_data[,i]),U)
if (test_label[i]==RecognizedDigit){
correct = correct + 1
}else{
wrong = wrong + 1
}
}
accuracy = correct / (correct + wrong)
end_time = Sys.time()
return(list(time = end_time - start_time, accuray = accuracy))
}
Timing_SVD(U_100)
Timing_SVD(U_J)
##b is a sample test vector to be classified
##data is the training data to build all of the systems of equations for each digit (i.e. train_data_1000)
##Normal equations
digit_NormLS= function(b,data=train_data_1000){
bestError = 1000000 #this should update to be the optimal error
digitrec = 100 #this should update to be the predicted digit between 0-9
##Insert your code here
for(i in 1:10) {
# A = data[,(i-1):i] #This is probably wrong, need to multiply by 100
if(i==1) {
A = data[,1:100]
} else {
A = data[,((i-1)*100):(i*100)]
}
xStar = solve(t(A)%*%A, t(A)%*%b)
bStar = A%*%xStar
r = vnorm(b-bStar)
if(r<bestError) {
bestError = r
digitrec = i-1
}
}
return(digitrec)
}
## Least Squares with QR Decomposition
digit_QRLS= function(b,data=train_data_1000){
bestError = 1000000 #this should update to be the optimal error
digitrec = 100 #this should update to be the predicted digit between 0-9
##Insert your code here
for(i in 1:10) {
#A = data[,(i-1):i] #This is probably wrong, need to multiply by 100
if(i==1) {
A = data[,1:100]
} else {
A = data[,((i-1)*100):(i*100)]
}
out = qr(A)
xStar = solve(qr.R(out), t(qr.Q(out))%*%b)
bStar = A%*%xStar
r = vnorm(b-bStar)
if(r<bestError) {
bestError = r
digitrec = i-1
}
}
return(digitrec)
}
## Least Squares with SVD
digit_SVDLS= function(b,data=train_data_1000){
bestError = 1000000 #this should update to be the optimal error
digitrec = 100 #this should update to be the predicted digit between 0-9
##Insert your code here
for(i in 1:10) {
#A = data[,(i-1):i] #This here is probably wrong, need to multiply by 100
if(i==1) {
A = data[,1:100]
} else {
A = data[,((i-1)*100):(i*100)]
}
outS = svd(A)
u = outS$u
v = outS$v
d = outS$d
c = t(u)%*%b
y = c/d
xStar = v %*% y
bStar = A%*%xStar
r = vnorm(b-bStar)
if(r<bestError) {
bestError = r
digitrec = i-1
}
}
return(digitrec)
}
#Uncomment lines below
Timing = function(method){
start_time = Sys.time()
correct = 0
wrong = 0
for(i in 1:ncol(test_data[,1:200])){
RecognizedDigit = method(as.matrix(test_data[,i]))
if (test_label[i]==RecognizedDigit){
correct = correct + 1
}else{
wrong = wrong + 1
}
}
accuracy = correct / (correct + wrong)
end_time = Sys.time()
return(list(time = end_time - start_time, accuracy = accuracy))
}
Timing(digit_NormLS)
Timing(digit_QRLS)
Timing(digit_SVDLS)
#Uncomment lines below
Timing = function(method){
start_time = Sys.time()
correct = 0
wrong = 0
for(i in 1:ncol(test_data[,1:200])){
RecognizedDigit = method(as.matrix(test_data[,i]))
if (test_label[i]==RecognizedDigit){
correct = correct + 1
}else{
wrong = wrong + 1
}
}
accuracy = correct / (correct + wrong)
end_time = Sys.time()
return(list(time = end_time - start_time, accuracy = accuracy))
}
Timing(digit_NormLS)
Timing(digit_QRLS)
Timing(digit_SVDLS)
digit_SVD = function(b, Uj){
bestError = 1000000
digitrec = 100
# Put your code here
J = ncol(Uj)/10
#print(J)
n = nrow(Uj)
for(j in 1:10) {
if(j == 1) {
PJ = matrix(0, nrow = n, ncol = n)
for(i in 1:J) {
PJ = PJ + Uj[,i]%*%t(Uj[,i])
}
bHat = PJ%*%b #This is not going to work, rows in PJ dont match b
r = vnorm(bHat - b)
if(r < bestError) {
bestError = r
digitrec = j-1
}
} else {
PJ = matrix(0, nrow = n, ncol = n)
for(i in ((j-1)*J):(j*J)) {
PJ = PJ + Uj[,i]%*%t(Uj[,i])
}
bHat = PJ%*%b
r = vnorm(bHat - b) #might need norm function here
if(r < bestError) {
bestError = r
digitrec = j-1
}
}
}
return(digitrec)
}
#J = 17
U_100=c() #Find this matrix
for(i in 1:10) {
if(i == 1) {
A = train_data_1000[,1:100]
} else {
A = train_data_1000[,((i-1)*100):(i*100)] #Will need to change thes indices
}
outS = svd(A)
u = outS$u
U_100 = cbind(U_100, u[,1:17])
}
U_J=c()#Find this matrix
num = ncol(train_data)/10
for(i in 1:10) {
if(i == 1) {
A = train_data[,1:num]
} else {
A = train_data[,((i-1)*num):(i*num)] #Will need to change thes indices
}
outS = svd(A)
u = outS$u
U_J = cbind(U_J, u[,1:17])
}
# #Uncommment code below
Timing_SVD = function(U,datapoints = ncol(test_data)){ #Remove indexing
start_time = Sys.time()
correct = 0
wrong = 0
for(i in 1:datapoints){
RecognizedDigit = digit_SVD(as.matrix(test_data[,i]),U)
if (test_label[i]==RecognizedDigit){
correct = correct + 1
}else{
wrong = wrong + 1
}
}
accuracy = correct / (correct + wrong)
end_time = Sys.time()
return(list(time = end_time - start_time, accuray = accuracy))
}
Timing_SVD(U_100)
Timing_SVD(U_J)
